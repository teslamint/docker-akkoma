version: '3.3'

services:
  nginx:
    image: ${NGINX_IMAGE:-docker.io/library/nginx}:${NGINX_TAG:-stable-alpine}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider --proxy=off http://localhost/api/v1/pleroma/healthcheck || exit 1",
        ]
    restart: unless-stopped
    networks:
      - pleroma
    environment:
      NGINX_PORT: 80
    ports:
      - "${COMPOSE_PORT_HTTP:-80}:80"
      - "${COMPOSE_PORT_HTTP_STATUS:-10080}:10080"
    volumes:
      - ./templates:/etc/nginx/templates
      - nginx_cache:/var/cache/nginx
      - nginx_pid:/var/run
    depends_on:
      web:
        condition: service_started
      pghero:
        condition: service_started

  postgres:
    image: ${POSTGRES_IMAGE:-docker.io/library/postgres}:${POSTGRES_TAG:-15-alpine}
    shm_size: 1gb
    hostname: db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "pleroma"]
    restart: unless-stopped
    ports:
      - "${COMPOSE_PORT_POSTGRES:-5432}:5432"
    networks:
      - pleroma
    env_file:
      - .env.postgres
    volumes:
      - ./postgres:/var/lib/postgresql/data

  meilisearch:
    image: docker.io/getmeili/meilisearch:${MEILISEARCH_TAG:-v1.2.0}
    ports:
      - "${COMPOSE_PORT_MEILISEARCH:-7700}:7700"
    networks:
      - pleroma
    env_file:
      - .env.search
    volumes:
      - ./meili_data:/meili_data

  web:
    image: ${PLEROMA_IMAGE:-docker.io/teslamint/akkoma}:${PLEROMA_TAG:-stable}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider --proxy=off http://127.0.0.1:4000/api/v1/pleroma/healthcheck || exit 1",
        ]
    restart: unless-stopped
    networks:
      - pleroma
    volumes:
      - ./pleroma:/var/lib/pleroma
    env_file:
      - .env.pleroma
    depends_on:
      postgres:
        condition: service_healthy
      meilisearch:
        condition: service_started

  pghero:
    image: ${PGHERO_IMAGE:-docker.io/ankane/pghero}:${PGHERO_TAG:-latest}
    networks:
      - pleroma
    env_file:
      - .env.pghero
    depends_on:
      postgres:
        condition: service_healthy

  cloudflared:
    image: ${CLOUDFLARED_IMAGE:docker.io/cloudflare/cloudflared}:${CLOUDFLARED_TAG:-latest}
    networks:
      - pleroma
    depends_on:
      nginx:
        condition: service_started
    env_file:
      - .env.cloudflared
    volumes:
      - ./cloudflared:/etc/cloudflared
    command: "tunnel run"

volumes:
  nginx_cache:
  nginx_pid:

networks:
  pleroma:
    name: pleroma_v6
    external: true
